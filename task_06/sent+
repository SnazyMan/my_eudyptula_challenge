From sleepingzucchini@gmail.com Tue May  9 06:34:13 2017
Date: Tue, 9 May 2017 06:34:13 -0400
From: SnazyMan <sleepingzucchini@gmail.com>
To: little@eudyptula-challenge.org
Subject: [9850aeb5fe79] Task 06 of the Eudyptula Challenge
Message-ID: <20170509103413.GA29452@snazyman-VirtualBox>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="k+w/mQv8wyuph6w0"
Content-Disposition: inline
User-Agent: Mutt/1.5.24 (2015-08-30)
Status: RO
Content-Length: 2090
Lines: 86


--k+w/mQv8wyuph6w0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline


--k+w/mQv8wyuph6w0
Content-Type: text/x-csrc; charset=us-ascii
Content-Disposition: attachment; filename="hello_world.c"

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/errno.h>
#include <linux/miscdevice.h>
#include <linux/uaccess.h>
#include <linux/string.h>

/*
 * Misc char driver w/ dynamic minor number, read & write methods
 * Misc device should show up in /dev/eudyptula
 * When read, the id "9850aeb5fe79" will be returned
 * When written to, the data sent to kernel must be checked, if it is the id,
 * return success, otherwise return "invalid value" (EINVAL?)
 * error value (errno?)
 * device should be registered when module is loaded and unregistered when
 * unloaded
 */

#define DRIVER_NAME "snazy_misc_device"
#define NODE_NAME "eudyptula"
#define ID_BUF_LEN 13

static ssize_t snazy_misc_device_read(struct file *file, char __user  *buff,
				      size_t count, loff_t *pos)
{
	char content[ID_BUF_LEN] = "9850aeb5fe79";

	if (count > ID_BUF_LEN)
		return -EINVAL;
	
	if (copy_to_user(buff, content, count))
		return -EFAULT;

	*pos += count;
	return count;
}

static ssize_t snazy_misc_device_write(struct file *file,
				       const char __user *buff,
				       size_t count, loff_t *pos)
{
	char content[ID_BUF_LEN];
	char id[ID_BUF_LEN] = "9850aeb5fe79";

	if (count > ID_BUF_LEN)
		return -EINVAL;

	if (copy_from_user(content, buff, count))
		return -EFAULT;

	if (strcmp(content, id) != 0)
		return -EINVAL;

	*pos += count;
	return count;
}

static const struct file_operations snazy_misc_device_fops = {
	.owner = THIS_MODULE,
	.read  = snazy_misc_device_read,
	.write = snazy_misc_device_write,
};

static struct miscdevice snazy_misc_device = {
	.minor = MISC_DYNAMIC_MINOR,
	.name  = DRIVER_NAME,
	.fops  = &snazy_misc_device_fops,
	.nodename = NODE_NAME,
};
module_misc_device(snazy_misc_device);

MODULE_AUTHOR("Tyler Olivieri - Snazyman");
MODULE_DESCRIPTION("task_06 of eudyptula challenge");
MODULE_LICENSE("GPL");

--k+w/mQv8wyuph6w0--

From sleepingzucchini@gmail.com Tue May  9 06:40:45 2017
Date: Tue, 9 May 2017 06:40:45 -0400
From: SnazyMan <sleepingzucchini@gmail.com>
To: little@eudyptula-challenge.org
Subject: [9850aeb5fe79] Task 06 of the Eudyptula Challenge
Message-ID: <20170509104045.GA29595@snazyman-VirtualBox>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="VS++wcV0S1rZb1Fb"
Content-Disposition: inline
User-Agent: Mutt/1.5.24 (2015-08-30)
Status: RO
Content-Length: 2089
Lines: 86


--VS++wcV0S1rZb1Fb
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline


--VS++wcV0S1rZb1Fb
Content-Type: text/x-csrc; charset=us-ascii
Content-Disposition: attachment; filename="hello_world.c"

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/errno.h>
#include <linux/miscdevice.h>
#include <linux/uaccess.h>
#include <linux/string.h>

/*
 * Misc char driver w/ dynamic minor number, read & write methods
 * Misc device should show up in /dev/eudyptula
 * When read, the id "9850aeb5fe79" will be returned
 * When written to, the data sent to kernel must be checked, if it is the id,
 * return success, otherwise return "invalid value" (EINVAL?)
 * error value (errno?)
 * device should be registered when module is loaded and unregistered when
 * unloaded
 */

#define DRIVER_NAME "snazy_misc_device"
#define NODE_NAME "eudyptula"
#define ID_BUF_LEN 13

static ssize_t snazy_misc_device_read(struct file *file, char __user  *buff,
				      size_t count, loff_t *pos)
{
	char content[ID_BUF_LEN] = "9850aeb5fe79";

	if (count > ID_BUF_LEN)
		return -EINVAL;

	if (copy_to_user(buff, content, count))
		return -EFAULT;

	*pos += count;
	return count;
}

static ssize_t snazy_misc_device_write(struct file *file,
				       const char __user *buff,
				       size_t count, loff_t *pos)
{
	char content[ID_BUF_LEN];
	char id[ID_BUF_LEN] = "9850aeb5fe79";

	if (count > ID_BUF_LEN)
		return -EINVAL;

	if (copy_from_user(content, buff, count))
		return -EFAULT;

	if (strcmp(content, id) != 0)
		return -EINVAL;

	*pos += count;
	return count;
}

static const struct file_operations snazy_misc_device_fops = {
	.owner = THIS_MODULE,
	.read  = snazy_misc_device_read,
	.write = snazy_misc_device_write,
};

static struct miscdevice snazy_misc_device = {
	.minor = MISC_DYNAMIC_MINOR,
	.name  = DRIVER_NAME,
	.fops  = &snazy_misc_device_fops,
	.nodename = NODE_NAME,
};
module_misc_device(snazy_misc_device);

MODULE_AUTHOR("Tyler Olivieri - Snazyman");
MODULE_DESCRIPTION("task_06 of eudyptula challenge");
MODULE_LICENSE("GPL");

--VS++wcV0S1rZb1Fb--

From sleepingzucchini@gmail.com Thu May 11 20:26:15 2017
Date: Thu, 11 May 2017 20:26:15 -0400
From: SnazyMan <sleepingzucchini@gmail.com>
To: little@eudyptula-challenge.org
Subject: [9850aeb5fe79] Task 06 of the Eudyptula Challenge
Message-ID: <20170512002615.GA4707@snazyman-VirtualBox>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="huq684BweRXVnRxX"
Content-Disposition: inline
User-Agent: Mutt/1.5.24 (2015-08-30)
Status: RO
Content-Length: 1988
Lines: 73


--huq684BweRXVnRxX
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline


--huq684BweRXVnRxX
Content-Type: text/x-csrc; charset=us-ascii
Content-Disposition: attachment; filename="hello_world.c"

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/errno.h>
#include <linux/miscdevice.h>
#include <linux/uaccess.h>
#include <linux/string.h>

/*
 * Misc char driver w/ dynamic minor number, read & write methods
 * Misc device should show up in /dev/eudyptula
 * When read, the id "9850aeb5fe79" will be returned
 * When written to, the data sent to kernel must be checked, if it is the id,
 * return success, otherwise return "invalid value" (EINVAL?)
 * error value (errno?)
 * device should be registered when module is loaded and unregistered when
 * unloaded
 */

#define DRIVER_NAME "snazy_misc_device"
#define NODE_NAME "eudyptula"
#define ID_BUF_LEN 13
static char *eudyptula_id = "9850aeb5fe79";

static ssize_t snazy_misc_device_read(struct file *file, char __user  *buff,
				      size_t count, loff_t *pos)
{
	return simple_read_from_buffer(buff, count, pos, eudyptula_id, ID_BUF_LEN);
}

static ssize_t snazy_misc_device_write(struct file *file,
				       const char __user *buff,
				       size_t count, loff_t *pos)
{
	int ret;
	char content[ID_BUF_LEN];

	ret = simple_write_to_buffer(content, ID_BUF_LEN, pos, buff, count);
	if (ret < 0)
		return -EINVAL;
	if (strcmp(content, eudyptula_id) != 0)
		return -EINVAL;
	return ret;
}

static const struct file_operations snazy_misc_device_fops = {
	.owner = THIS_MODULE,
	.read  = snazy_misc_device_read,
	.write = snazy_misc_device_write,
};

static struct miscdevice snazy_misc_device = {
	.minor = MISC_DYNAMIC_MINOR,
	.name  = DRIVER_NAME,
	.fops  = &snazy_misc_device_fops,
	.nodename = NODE_NAME,
};
module_misc_device(snazy_misc_device);

MODULE_AUTHOR("Tyler Olivieri - Snazyman");
MODULE_DESCRIPTION("task_06 of eudyptula challenge");
MODULE_LICENSE("GPL");

--huq684BweRXVnRxX--

