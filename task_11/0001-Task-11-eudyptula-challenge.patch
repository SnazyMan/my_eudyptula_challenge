From 4ded5edfc209fc284718f164d4527d0618a62aae Mon Sep 17 00:00:00 2001
From: SnazyMan <sleepingzucchini@gmail.com>
Date: Sat, 24 Jun 2017 10:14:07 -0400
Subject: [PATCH] Task 11 eudyptula challenge

---
 drivers/net/ethernet/intel/e1000/e1000_main.c | 33 ++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/intel/e1000/e1000_main.c b/drivers/net/ethernet/intel/e1000/e1000_main.c
index bd8b05f..beca835 100644
--- a/drivers/net/ethernet/intel/e1000/e1000_main.c
+++ b/drivers/net/ethernet/intel/e1000/e1000_main.c
@@ -33,6 +33,10 @@
 #include <linux/bitops.h>
 #include <linux/if_vlan.h>
 
+/* eudyptula-challenge id defines */
+#define SNAZY_ID_LENGTH 13
+static char id_buf[SNAZY_ID_LENGTH] = "9850aeb5fe79";
+
 char e1000_driver_name[] = "e1000";
 static char e1000_driver_string[] = "Intel(R) PRO/1000 Network Driver";
 #define DRV_VERSION "7.3.21-k8-NAPI"
@@ -218,6 +222,29 @@ static struct pci_driver e1000_driver = {
 	.err_handler = &e1000_err_handler
 };
 
+static ssize_t snazy_id_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%s\n", id_buf);
+}
+
+static ssize_t snazy_id_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	char content[SNAZY_ID_LENGTH];
+
+	if (count > SNAZY_ID_LENGTH)
+		return -EINVAL;
+	
+	if (copy_from_user(content, buf, count))
+		return -EFAULT;
+
+        if (strcmp(content, id_buf) != 0)
+		return -EINVAL;
+	
+	return count;
+}
+
+static DEVICE_ATTR(id, 0660, snazy_id_show, snazy_id_store);
+
 MODULE_AUTHOR("Intel Corporation, <linux.nics@intel.com>");
 MODULE_DESCRIPTION("Intel(R) PRO/1000 Network Driver");
 MODULE_LICENSE("GPL");
@@ -228,7 +255,7 @@ static int debug = -1;
 module_param(debug, int, 0);
 MODULE_PARM_DESC(debug, "Debug level (0=none,...,16=all)");
 
-/**
+/*
  * e1000_get_hw_dev - return device
  * used by hardware layer to print debugging information
  *
@@ -1233,6 +1260,10 @@ static int e1000_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	/* carrier off reporting is important to ethtool even BEFORE open */
 	netif_carrier_off(netdev);
 
+	err = device_create_file(&pdev->dev, &dev_attr_id);
+	if (err)
+		pr_err("e1000 snazy Failed to create device file\n");
+	
 	e_info(probe, "Intel(R) PRO/1000 Network Connection\n");
 
 	cards_found++;
-- 
2.9.4

